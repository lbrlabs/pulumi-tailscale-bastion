// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Bastion extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'tailscale-bastion:azure:Bastion';

    /**
     * Returns true if the given object is an instance of Bastion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bastion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bastion.__pulumiType;
    }

    /**
     * The SSH private key to access your bastion
     */
    declare public /*out*/ readonly privateKey: pulumi.Output<string>;
    /**
     * The name of the Scaleset that managed the bastion instances
     */
    declare public /*out*/ readonly scaleSetName: pulumi.Output<string>;

    /**
     * Create a Bastion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BastionArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.highAvailability === undefined && !opts.urn) {
                throw new Error("Missing required property 'highAvailability'");
            }
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (args?.routes === undefined && !opts.urn) {
                throw new Error("Missing required property 'routes'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.tailscaleTags === undefined && !opts.urn) {
                throw new Error("Missing required property 'tailscaleTags'");
            }
            resourceInputs["enableSSH"] = (args?.enableSSH) ?? true;
            resourceInputs["highAvailability"] = (args?.highAvailability) ?? false;
            resourceInputs["instanceSku"] = args?.instanceSku;
            resourceInputs["location"] = args?.location;
            resourceInputs["public"] = (args?.public) ?? false;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["routes"] = args?.routes;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tailscaleTags"] = args?.tailscaleTags;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["scaleSetName"] = undefined /*out*/;
        } else {
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["scaleSetName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bastion.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Bastion resource.
 */
export interface BastionArgs {
    /**
     * Whether to enable SSH access to the bastion.
     */
    enableSSH?: pulumi.Input<boolean>;
    /**
     * Whether the bastion should be highly available.
     */
    highAvailability: pulumi.Input<boolean>;
    /**
     * The Azure instance SKU to use for the bastion.
     */
    instanceSku?: pulumi.Input<string>;
    /**
     * The Azure region you're using.
     */
    location: pulumi.Input<string>;
    /**
     * Whether the bastion should have a public IP.
     */
    public?: pulumi.Input<boolean>;
    /**
     * The Azure resource group to create the bastion in.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The routes you'd like to advertise via tailscale.
     */
    routes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subnet Ids to launch instances in.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The tags to apply to the tailnet device andauth key. This tag should be added to your oauth key and ACL.
     */
    tailscaleTags: pulumi.Input<pulumi.Input<string>[]>;
}
